import streamlit as st
import pandas as pd
import plotly.express as px
import os

st.set_page_config(page_title="Distribui√ß√£o e Causas", page_icon="üî•", layout="wide")

st.markdown("# Distribui√ß√£o e Causas dos Inc√™ndios")
st.sidebar.header("Distribui√ß√£o e Causas")
st.write("""
Esta se√ß√£o explora a distribui√ß√£o do tamanho dos inc√™ndios, as causas mais comuns (gerais e espec√≠ficas)
e os estados mais afetados.
""")

# Fun√ß√£o para carregar os dados (cache para efici√™ncia)
@st.cache_data
def load_data(file_path):
    if os.path.exists(file_path):
        try:
            return pd.read_csv(file_path)
        except Exception as e:
            st.error(f"Erro ao ler o arquivo CSV: {e}")
            return None
    else:
        st.error(f"Erro: Arquivo de dados n√£o encontrado em {file_path}")
        return None

# Caminho para o arquivo de dados
data_path = "data/wildfires.csv"

# Carrega os dados
df = load_data(data_path)

if df is not None:
    # --- Distribui√ß√£o do Tamanho dos Inc√™ndios ---
    st.subheader("Distribui√ß√£o do Tamanho dos Inc√™ndios (FIRE_SIZE)")
    st.write("Histograma mostrando a frequ√™ncia dos inc√™ndios por tamanho (em acres). Note que a escala do eixo X √© logar√≠tmica devido √† grande varia√ß√£o nos tamanhos.")

    # Filtrar apenas tamanhos v√°lidos e maiores que 0
    df_valid_fire_size = df[df['FIRE_SIZE'] > 0]

    # Verifica√ß√£o extra: mostrar estat√≠sticas
    st.write("Estat√≠sticas da coluna FIRE_SIZE:")
    st.write(df_valid_fire_size['FIRE_SIZE'].describe())

    if not df_valid_fire_size.empty:
        fig_hist = px.histogram(df_valid_fire_size, x="FIRE_SIZE", nbins=100, 
                                title="Distribui√ß√£o do Tamanho dos Inc√™ndios (Escala Log)",
                                labels={"FIRE_SIZE": "Tamanho do Inc√™ndio (Acres)"},
                                log_x=True)  # Escala logar√≠tmica
        st.plotly_chart(fig_hist, use_container_width=True)
    else:
        st.warning("N√£o h√° dados v√°lidos de tamanho de inc√™ndio maiores que zero para exibir o histograma.")

    # --- An√°lise das Causas ---
    st.subheader("Causas dos Inc√™ndios")
    
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**Causas Gerais (STAT_CAUSE_DESCR)**")
        cause_counts = df["NWCG_GENERAL_CAUSE"].value_counts()
        fig_cause_general = px.bar(cause_counts, x=cause_counts.index, y=cause_counts.values,
                                   title="Contagem por Causa Geral",
                                   labels={"index": "Causa Geral", "y": "N√∫mero de Inc√™ndios"})
        fig_cause_general.update_layout(xaxis_title="", yaxis_title="N√∫mero de Inc√™ndios")
        st.plotly_chart(fig_cause_general, use_container_width=True)

    with col2:
        st.markdown("**Tamanho M√©dio por Causa Geral**")
        mean_size_by_cause = df.groupby("NWCG_GENERAL_CAUSE")["FIRE_SIZE"].mean().sort_values(ascending=False)
        fig_mean_size = px.bar(mean_size_by_cause, x=mean_size_by_cause.index, y=mean_size_by_cause.values,
                               title="Tamanho M√©dio do Inc√™ndio por Causa Geral",
                               labels={"index": "Causa Geral", "y": "Tamanho M√©dio (Acres)"})
        fig_mean_size.update_layout(xaxis_title="", yaxis_title="Tamanho M√©dio (Acres)")
        st.plotly_chart(fig_mean_size, use_container_width=True)

    # --- Estados Mais Afetados ---
    st.subheader("Estados Mais Afetados")
    state_counts = df["STATE"].value_counts().head(15) # Top 15 estados
    fig_states = px.bar(state_counts, x=state_counts.index, y=state_counts.values,
                        title="Top 15 Estados com Mais Inc√™ndios Registrados",
                        labels={"index": "Estado", "y": "N√∫mero de Inc√™ndios"})
    fig_states.update_layout(xaxis_title="Estado", yaxis_title="N√∫mero de Inc√™ndios")
    st.plotly_chart(fig_states, use_container_width=True)

else:
    st.warning("N√£o foi poss√≠vel carregar os dados para gerar as visualiza√ß√µes. Verifique a p√°gina 'Vis√£o Geral'.")

